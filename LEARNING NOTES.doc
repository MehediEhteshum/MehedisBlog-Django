# Important files and folders
project_folder/settings.py // add apps/components, 'templates' directory, STATIC_ROOT, STATICFILES_DIRS.
project_folder/urls.py // add view paths
app/models.py // add models/schema
app/admin.py // import and register the app
app/views.py // adds view methods/classes, render templates. get POST ot GET values. manage form instances.
templates // create templates folder, add all 'html' templates and snippets here
templates/app/form.html // create or add html form. It prevents from 'url' query. add csrf_token.
app/forms.py // import and create django Form or better ModelForm. custom data validation can be added.
accounts // create app for user signup, login, logout views and forms
staticfiles // create this folder as STATICFILES_DIRS to save common static files for apps
app/static/app // create this folder to save app specific static files
// never serve statics from django except for debug/dev models.
cdn_test/static // create this folder as STATIC_ROOT in dev mode


# Starting project
python -m venv . // creates virtual environment inside the project folder
.\Scripts\activate // activates the environment in winOS
pip freeze // lists installed libraries in the environment
pip install django // installs in the environment
python -m django --version // checking django version or installation
django-admin // lists django commands
django-admin startproject project_name . // creates and starts project
// save workspace if necessary
python manage.py // lists commands and works specific for the project
python manage.py createsuperuser // creates superuser
python manage.py runserver // runs the server

python manage.py startapp appname // creates app/component
python manage.py makemigrations // commits db changes
python manage.py migrate // creates db
python manage.py collectstatic // collects statics in STATIC_ROOT

python manage.py shell // to access db

// Django user models
from django.conf import settings // when User model is required for ForeignKey purpose
from django.contrib.auth import get_user_model // then,
User = get_user_model() // when User model is required for qs purpose
user.post_set.all() // all 'post' instances associated with the 'user' instance
user.post_set.create(**kwargs) // create a post for the user